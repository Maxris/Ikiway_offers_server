const axios = require('axios');
require('dotenv').config();
const Job = require('../models/jobOffer'); // ‚úÖ Import du mod√®le MongoDB

const WEBFLOW_API_URL = 'https://api.webflow.com/v2/collections';
const WEBFLOW_API_TOKEN = process.env.WEBFLOW_API_TOKEN;
const SITE_ID = process.env.WEBFLOW_SITE_ID; 
const COLLECTION_ID = process.env.COLLECTION_ID;

// ‚úÖ Fonction pour r√©cup√©rer l'ID de la collection Webflow
async function getWebflowCollectionId() {
    try {
        console.log(`üîé R√©cup√©ration des collections Webflow pour le site ID: ${SITE_ID}`);

        const response = await axios.get(`https://api.webflow.com/v2/sites/${SITE_ID}/collections`, {
            headers: {
                'Authorization': `Bearer ${WEBFLOW_API_TOKEN}`,
                'accept-version': '2.0',
                'Content-Type': 'application/json'
            }
        });

        console.log("‚úÖ Collections Webflow r√©cup√©r√©es :", response.data);

        // üîç Recherche la collection "Jobs"
        const collection = response.data.collections.find(col => col.displayName === "Jobs");

        if (!collection) {
            throw new Error("‚ùå Collection Webflow 'Jobs' introuvable !");
        }

        console.log(`‚úÖ Collection Webflow trouv√©e : ID ${collection.id}`);
        return collection.id;
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration de l'ID de la collection Webflow :", error.response?.data || error.message);
        throw error;
    }
}




// ‚úÖ Fonction pour publier automatiquement les offres apr√®s ajout
async function publishWebflowCollection() {
    console.log("üöÄ Publication des offres Webflow...");

    try {
        const response = await axios.post(
            `https://api.webflow.com/v2/sites/${process.env.WEBFLOW_SITE_ID}/publish`,
            {
                collections: [process.env.WEBFLOW_COLLECTION_ID], // ‚úÖ Utilisation de l'ID de la collection
                domains: [process.env.WEBFLOW_DOMAIN_ID] // ‚úÖ Utilisation du domaine Webflow.io
            },
            {
                headers: {
                    'Authorization': `Bearer ${process.env.WEBFLOW_API_TOKEN}`,
                    'accept-version': '2.0',
                    'Content-Type': 'application/json'
                }
            }
        );

        console.log("‚úÖ Offres publi√©es avec succ√®s :", response.data);
    } catch (error) {
        console.error("‚ùå Erreur lors de la publication des offres Webflow :", error.response?.data || error.message);
    }
}




// ‚úÖ Fonction pour r√©cup√©rer toutes les offres existantes dans Webflow
async function getExistingWebflowJobs() {
    console.log("üîé V√©rification des offres d√©j√† pr√©sentes dans Webflow...");

    try {
        const response = await axios.get(
            `https://api.webflow.com/v2/collections/${COLLECTION_ID}/items`,
            {
                headers: {
                    'Authorization': `Bearer ${WEBFLOW_API_TOKEN}`,
                    'accept-version': '2.0'
                }
            }
        );

        // üî• V√©rifier si on re√ßoit bien des donn√©es
        if (!response.data.items || response.data.items.length === 0) {
            console.log("‚ö†Ô∏è Aucune offre existante trouv√©e sur Webflow.");
            return new Set();
        }

        // ‚úÖ Extraction des `reference-id` (ou `name` si besoin)
        const existingJobs = new Set(response.data.items.map(item => item["reference-id"]));

        console.log(`‚úÖ ${existingJobs.size} offres d√©j√† pr√©sentes dans Webflow.`);
        return existingJobs;

    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des offres Webflow :", error.response?.data || error.message);
        return new Set(); // üî¥ Retourne un Set vide en cas d'erreur pour √©viter les bugs
    }
}




// ‚úÖ Fonction pour envoyer toutes les offres existantes dans Webflow
exports.sendJobsToWebflow = async function () {
    console.log("‚ö° Envoi des offres d'emploi vers Webflow...");

    try {
        // üîé R√©cup√©ration de l'ID de la collection si non d√©fini
        let collectionId = process.env.WEBFLOW_COLLECTION_ID;
        if (!collectionId) {
            console.log("üîç ID de la collection Webflow non trouv√©, r√©cup√©ration...");
            collectionId = await getWebflowCollectionId();
            process.env.WEBFLOW_COLLECTION_ID = collectionId; // ‚úÖ Stocker pour √©viter de le r√©cup√©rer √† chaque appel
        }

        console.log(`‚úÖ Collection Webflow ID : ${collectionId}`);

        // üîç R√©cup√©ration des offres existantes pour √©viter les doublons
        const existingWebflowJobs = await getExistingWebflowJobs();

        // üì¶ R√©cup√©ration des offres MongoDB
        const jobs = await Job.find({});
        console.log(`üì¶ ${jobs.length} offres r√©cup√©r√©es depuis MongoDB`);

        for (const job of jobs) {
            // üîÑ V√©rifier si l'offre existe d√©j√† sur Webflow
            if (existingWebflowJobs.has(job.offre_id)) {
                console.log(`üîÑ Offre d√©j√† existante, pas d'ajout : ${job.titre}`);
                continue; // ‚ùå On passe cette offre
            }

            try {
                const webflowJob = {
                    items: [
                        {
                            fieldData: {
                                "reference-id": job.offre_id,
                                "titre-du-poste": job.titre,
                                "name": job.titre,
                                "slug": job.titre.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '').slice(0, 50),
                                "responsable": job.societe,
                                "email-du-reponsable": job.apply_mail,
                                "description-du-poste": job.desc_poste || "",
                                "aboutcompany": job.desc_societe || "",
                                "searchedprofile": job.desc_profil || "",
                                "localisation": job.ville || "",
                                "sector": job.metier || "",
                                "contracttype": job.contrat_lib || "",
                                "salary": `${job.sal_min || ''} - ${job.sal_max || ''}`,
                                "timeperweek": job.temps_travail || "",
                                "schedules": job.remote_type || "",
                                "project-id": job.apply_url
                            }
                        }
                    ]
                };

                console.log(`üì§ Envoi de l'offre '${job.titre}' vers Webflow...`);

                const response = await axios.post(
                    `https://api.webflow.com/v2/collections/${collectionId}/items`,
                    webflowJob,
                    {
                        headers: {
                            'Authorization': `Bearer ${WEBFLOW_API_TOKEN}`,
                            'accept-version': '2.0',
                            'Content-Type': 'application/json'
                        }
                    }
                );

                console.log(`‚úÖ Offre envoy√©e avec succ√®s : ${job.titre}`);

            } catch (err) {
                console.error(`‚ùå Erreur lors de l'ajout de '${job.titre}' :`, err.response?.data || err.message);
            }
        }

        console.log("üéØ Toutes les offres ont √©t√© trait√©es (sans doublon).");

        // üöÄ Publier la collection apr√®s ajout des offres
        await publishWebflowCollection();

    } catch (error) {
        console.error("‚ùå Erreur lors de l'envoi des offres √† Webflow :", error.message);
    }
};
